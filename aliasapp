#!/usr/bin/env ruby
#             ___
#      ____ _/ (_)___ __________ _____  ____
#     / __ `/ / / __ `/ ___/ __ `/ __ \/ __ \
#    / /_/ / / / /_/ (__  ) /_/ / /_/ / /_/ /
#    \__,_/_/_/\__,_/____/\__,_/ .___/ .___/
#                             /_/   /_/
#
# aliasapp
#
# Create an OS X application that simply opens another OS X application.
#
# Usage:
#
#   aliasapp Example.app ExampleAlias.app

require 'tempfile'
require 'fileutils'

# Add convenience methods to Object.
class Object
  def blank?; respond_to?(:empty?) ? !!empty? : !self end
  def present?; !blank? end
end

# Aliasapp
#
# Contains the core functionality and child modules for creating application
# aliases.
module Aliasapp
  HELP = "Description: Create an OS X application that simply opens another OS X application.\n" +
         "Usage: aliasapp source.app destination.app"
  FORMAT_ERROR = "Error: Both source and target must have a .app extensions."
  EXISTS_ERROR = "Error: File already exists at specified location."

  # Determine whether to display help or feedback, and if not, create the
  # alias and copy the icon.
  def self.create!(source, target)
    case
    when Aliasapp.needs_help?
      puts Aliasapp::HELP
    when Aliasapp.bad_opt_format?(source, target)
      puts Aliasapp::FORMAT_ERROR
    when Aliasapp.already_exists?(target)
      puts Aliasapp::EXISTS_ERROR
    else
      Aliasapp::Alias.create!(source, target)
      Aliasapp::Icon.copy!(source, target)
    end
  end

  # Check if the first argument is '-h' or if either of the arguments is
  # missing.
  def self.needs_help?
    ARGV[0] == "-h" || !ARGV[0] || !ARGV[1]
  end

  # Confirm that each of the arguments has a .app file extension.
  def self.bad_opt_format?(source, target)
    source !~ /.app$/ || target !~ /.app$/
  end

  # Check whether a file already exists at the target location.
  def self.already_exists?(target)
    File.exists?(target)
  end

  # Aliasapp::Alias
  #
  # Functions for building and constructing the "alias" application bundle.
  module Alias
    APP_ALIAS_DIR = File.join("Contents", "Resources", "Alias")
    APP_ALIAS_FILENAME = "AppAlias"
    APPLESCRIPT_TEMPLATE = <<-TEMPLATE
#!/usr/bin/osascript
set app_path to (path to me)
tell application (POSIX path of app_path & "#{APP_ALIAS_DIR}/#{APP_ALIAS_FILENAME}") to activate
TEMPLATE

    # Given source and target application paths, build a wrapper script and
    # compile a new "alias" application at the target path.
    def self.create!(source, target)

      Aliasapp::Alias.compile!(Aliasapp::Alias::APPLESCRIPT_TEMPLATE, target)
      Aliasapp::Alias.create_alias!(source, target)

    end

    # Use osacompile to compile an application bundle containing the provided
    # applescript content.
    def self.compile!(applescript, target)
      # Write AppleScript to tempfile
      t = Tempfile.new('applescript', '/tmp').tap do |file|
        file.write(applescript)
      end
      t.rewind

      # Compile to app bundle
      command = %Q|osacompile -o "#{target}" #{t.path}|
      %x[#{command}]
    end

    # Use an AppleScript call to create an OS X alias to the target application
    # within the aliasapp-created application bundle. This alias is then given
    # the name referenced in the launcher script.
    def self.create_alias!(source, target)
      full_source_path = File.expand_path(source)
      full_target_path = File.expand_path(target)
      alias_dir_path = File.join(full_target_path, Aliasapp::Alias::APP_ALIAS_DIR)

      # Create the directory in the application for the alias.
      FileUtils.mkdir(alias_dir_path)

      # Use AppleScript to create an OS X alias file.
      alias_script = %Q|tell application "Finder" to make new alias | +
                     %Q|at POSIX file "#{alias_dir_path}" | +
                     %Q|to POSIX file "#{full_source_path}"|
      %x[osascript -e '#{alias_script}']

      # Rename the file to the name expected by the compiled script.
      alias_file = Dir["#{alias_dir_path}/*"][0]
      File.rename(
        alias_file, File.join(alias_dir_path, Aliasapp::Alias::APP_ALIAS_FILENAME)
      )

    end
  end

  # Aliasapp::Icon
  #
  # Functions for determinging the source icon and copying it to the "alias"
  # application bundle.
  module Icon

    # Return the filename for the icon specified in the source application's
    # Info.plist. If the filename is missing the .icns file extenstion, add
    # it to the filename before returning.
    def self.source_filename(source)
      plist = File.join(source, 'Contents', 'Info.plist')
      filename = %x[/usr/libexec/PlistBuddy -c Print:CFBundleIconFile "#{plist}"].strip
      if filename.present? && filename !~ /\.icns/
        filename = "#{filename}.icns"
      end
      filename
    end

    # Return the path of the source application's icon.
    def self.source_path(source)
      filename = Aliasapp::Icon.source_filename(source)
      if filename.present?
        path = File.join(source, 'Contents', 'Resources', filename)
      end
      path || ""
    end

    # Return the path of the wrapper application's icon.
    def self.target_path(target)
      File.join(target, "/Contents/Resources/applet.icns")
    end

    # Given source and target application paths, copy the icon from the source
    # to the target application.
    def self.copy!(source, target)
      source_icon = Aliasapp::Icon.source_path(source)
      target_icon = Aliasapp::Icon.target_path(target)
      if source_icon.present?
        FileUtils.rm(target_icon)
        FileUtils.cp(source_icon, target_icon)
      end
    end
  end
end

# Start
Aliasapp.create!(ARGV[0], ARGV[1])
